(defun ciclo-matriz-n (n array)
    (setf aux (make-array j))
    (dotimes (y j)
        (setf e1 (aref array 0 y))
        (setf (apply #'aref (list aux y)) e1)
    )
    (dotimes (x n)
        (dotimes (a (- i 1))
            (dotimes (b j) 
                (setf (apply #'aref array (list a b)) (aref array (+ a 1) b))
            ) 
        )
        (dotimes (b j)
            (setf e1 (aref aux b))
            (setf (apply #'aref array (list (- i 1) b)) e1)
        )
    )
    (format t "~%Resultado: ~a~%" array)
)

(defun matriz()
(format t "~%Ingrese las dimension de su matriz: (i, j)")
(format t "~%i : ")
(setf i (read))
(format t "j : ")
(setf j (read))
(setf dim (list i j))
(setf array (make-array dim))
(format t "~%Elementos de la matriz: ~%")
(dotimes (a i)
    (dotimes (b j)
            (format t "(~a, " a)
            (format t "~a): " b)
            (setf e (read))
            (setf dim (list a b))
            (setf (apply #'aref array dim) e)
    )
)
(format t "~%Matriz: ~a" array)
)

(loop
do
(loop
do
(format t "~%Eliga Opcion 1/2/3")
(format t "~%1: ciclo matriz 1 vez.~%2: ciclo matriz n veces.~%3: Salir.~%")
(setf opc (read))
while (not (or (or (= opc 1) (= opc 2)) (= opc 3)))
)
(case opc
    (1
        (matriz)
        (ciclo-matriz-n 1 array)
    )
    (2
        (matriz)
        (format t "~%Cuantas veces desea realizar ciclo matriz?: ")
        (setf n (read))
        (ciclo-matriz-n n array)
    )
    (3
    )
)
while(not(= opc 3))
)
