(defun aplica-suma()
    (setf sum 0)
    (dotimes (a i)
        (setf op (nth a lista))
        (dotimes (b j)
            (case op
                (1
                    (setf sum (+ sum (sqrt (aref array a b))))  
                )
                (2
                    (setf sum (+ sum (sin (aref array a b))))  
                )
            )
        )
    )
    (format t "~%Resultado: ~a~%" sum)
)

(defun matriz()
(format t "~%Ingrese las dimension de su matriz: (i, j)")
(format t "~%i : ")
(setf i (read))
(format t "j : ")
(setf j (read))
(setf dim (list i j))
(setf array (make-array dim))
(format t "~%Elementos de la matriz: ~%")
(dotimes (a i)
    (dotimes (b j)
            (format t "(~a, " a)
            (format t "~a): " b)
            (setf e (read))
            (setf dim (list a b))
            (setf (apply #'aref array dim) e)
    )
)
(format t "~%Matriz: ~a" array)
)

(defun operaciones()
    (setf lista nil)
    (format t "~%Ingrese las operaciones que desea realizar en la matriz")
    (format t "~% [1] = raiz - [2] = sin(x)~%")
    (dotimes (a i)
        (format t "(fila ~a): " (+ a 1))
        (setf e (read))
        (setf lista (cons e lista))
    )
    (setf lista (reverse lista))
(format t "lista de operaciones: (")
(dotimes (a i)
    (setf e (nth a lista))
    (case e
        (1
            (format t " raiz ")
        )
        (2
            (format t " seno ")
        )
    )
)
(format t ")~%")
)


(matriz)
(operaciones)
(aplica-suma)
